parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr)
opt
mu_A
n_A+n_B
n_B/(n_A+n_B)
p
hist(n_B/(n_A+n_B))
obj$report()
opt
obj$par
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr)
rep <- sdreport(obj)
rep
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr)
rep <- sdreport(obj)
# #################################
# Test negative binomial
# simulation in R and estimation using TMB
# small r and small n_i causes convergence issues
# #################################
rm(list = ls())
setwd("C:/Users/yinyi/Dropbox/BIO/Workspace/test")
# ### Data simulation
# number of stations
n_i <- 50
# density at location i
r <- 5 # measure of dispersion: small r causes convergence issues
d <- 10 # density mean
dens <- rgamma(n = n_i, shape = r, scale = d/r)
# mean catch at location i
rho <- 1.5
q_A <- 1
q_B <- q_A*rho
mu_A <- q_A * dens
mu_B <- q_B * dens
# catch at location i
n_A <- rpois(n_i, mu_A)
n_B <- rpois(n_i, mu_B)
plot(1:n_i, n_A, ylim = range(c(n_A, n_B)))
points(1:n_i, n_B, col = "red", pch = 2)
# plot(n_A,n_B, main = cor(n_A, n_B))
# ### Fit model
# # ### fit a negative multinomial model
#
# library(TMB)
#
# data = list(
#   n_A = n_A,
#   n_B = n_B)
# parameters = list(
#   log_d = 0,
#   log_r = 0,
#   log_dens = rep(0, n_i),
#   log_q_A = 0,
#   log_q_B = 0)
#
# version <- "negative_multinomial"
# compile(paste0(version,".cpp"))
# dyn.load(dynlib(version))
# obj = MakeADFun(data=data,
#                 parameters=parameters,
#                 map=list("log_q_A" = factor(NA)),
#                 random=c("log_dens"),
#                 DLL=version,
#                 silent = F)
# opt <- nlminb(obj$par,obj$fn,obj$gr)
# rep <- sdreport(obj)
#
# c(rep$value, rep$sd)
#
# plot(exp(rep$par.random), dens)
# abline(0, 1, col = "red")
# ### fit a beta negative multinomial model
library(TMB)
data = list(
n_A = n_A,
n_B = n_B)
parameters = list(
log_alpha = 0,
log_beta = 0,
log_rho = rep(0, n_i))
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr)
rep <- sdreport(obj)
t(rbind(rep$value, rep$sd))
plot(n_A,n_B, main = cor(n_A, n_B))
# #################################
# Test negative binomial
# simulation in R and estimation using TMB
# small r and small n_i causes convergence issues
# #################################
rm(list = ls())
setwd("C:/Users/yinyi/Dropbox/BIO/Workspace/test")
# ### Data simulation
# number of stations
n_i <- 50
# density at location i
r <- 5 # measure of dispersion: small r causes convergence issues
d <- 10 # density mean
dens <- rgamma(n = n_i, shape = r, scale = d/r)
# mean catch at location i
rho <- 1.5
q_A <- 1
q_B <- q_A*rho
mu_A <- q_A * dens
mu_B <- q_B * dens
# catch at location i
n_A <- rpois(n_i, mu_A)
n_B <- rpois(n_i, mu_B)
plot(1:n_i, n_A, ylim = range(c(n_A, n_B)))
points(1:n_i, n_B, col = "red", pch = 2)
# plot(n_A,n_B, main = cor(n_A, n_B))
# ### Fit model
# # ### fit a negative multinomial model
#
# library(TMB)
#
# data = list(
#   n_A = n_A,
#   n_B = n_B)
# parameters = list(
#   log_d = 0,
#   log_r = 0,
#   log_dens = rep(0, n_i),
#   log_q_A = 0,
#   log_q_B = 0)
#
# version <- "negative_multinomial"
# compile(paste0(version,".cpp"))
# dyn.load(dynlib(version))
# obj = MakeADFun(data=data,
#                 parameters=parameters,
#                 map=list("log_q_A" = factor(NA)),
#                 random=c("log_dens"),
#                 DLL=version,
#                 silent = F)
# opt <- nlminb(obj$par,obj$fn,obj$gr)
# rep <- sdreport(obj)
#
# c(rep$value, rep$sd)
#
# plot(exp(rep$par.random), dens)
# abline(0, 1, col = "red")
# ### fit a beta negative multinomial model
library(TMB)
data = list(
n_A = n_A,
n_B = n_B)
parameters = list(
log_alpha = 0,
log_beta = 0,
log_rho = rep(0, n_i))
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr)
rep <- sdreport(obj)
t(rbind(rep$value, rep$sd))
data
n_A/n_B
n_B/(n_A+n_B)
hist(n_B/(n_A+n_B))
fitdist(n_B/(n_A+n_B),"beta")
mu_A
mu_B
n_A
n_B
data = list(
n_A = n_A,
n_B = n_B)
parameters = list(
log_alpha = 0,
log_beta = 0,
log_rho = rep(0, n_i))
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr)
opt
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
obj$report()
opt <- nlminb(obj$par,obj$fn,obj$gr)
opt
obj$report()
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
obj$report()
opt <- nlminb(obj$par,obj$fn,obj$gr)
obj$report()
1.5/2.5
version <- "beta_binomial"
compile(paste0(version,".cpp"))
data = list(
n_A = n_A,
n_B = n_B)
parameters = list(
alpha = 0,
beta = 0,
log_rho = rep(0, n_i))
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr)
obj$report()
parameters = list(
alpha = 1,
beta = 1,
log_rho = rep(0, n_i))
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr)
opt
obj$report()
# #################################
# Test negative binomial
# simulation in R and estimation using TMB
# small r and small n_i causes convergence issues
# #################################
rm(list = ls())
setwd("C:/Users/yinyi/Dropbox/BIO/Workspace/test")
# ### Data simulation
# number of stations
n_i <- 50
# density at location i
r <- 5 # measure of dispersion: small r causes convergence issues
d <- 10 # density mean
dens <- rgamma(n = n_i, shape = r, scale = d/r)
# mean catch at location i
rho <- 1.5
q_A <- 1
q_B <- q_A*rho
mu_A <- q_A * dens
mu_B <- q_B * dens
# catch at location i
n_A <- rpois(n_i, mu_A)
n_B <- rpois(n_i, mu_B)
plot(1:n_i, n_A, ylim = range(c(n_A, n_B)))
points(1:n_i, n_B, col = "red", pch = 2)
# plot(n_A,n_B, main = cor(n_A, n_B))
# ### Fit model
# # ### fit a negative multinomial model
#
# library(TMB)
#
# data = list(
#   n_A = n_A,
#   n_B = n_B)
# parameters = list(
#   log_d = 0,
#   log_r = 0,
#   log_dens = rep(0, n_i),
#   log_q_A = 0,
#   log_q_B = 0)
#
# version <- "negative_multinomial"
# compile(paste0(version,".cpp"))
# dyn.load(dynlib(version))
# obj = MakeADFun(data=data,
#                 parameters=parameters,
#                 map=list("log_q_A" = factor(NA)),
#                 random=c("log_dens"),
#                 DLL=version,
#                 silent = F)
# opt <- nlminb(obj$par,obj$fn,obj$gr)
# rep <- sdreport(obj)
#
# c(rep$value, rep$sd)
#
# plot(exp(rep$par.random), dens)
# abline(0, 1, col = "red")
# ### fit a beta negative multinomial model
library(TMB)
data = list(
n_A = n_A,
n_B = n_B)
parameters = list(
log_alpha = 10,
log_beta = 10,
log_rho = rep(0, n_i))
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr)
rep <- sdreport(obj)
t(rbind(rep$value, rep$sd))
opt
opt <- nlminb(obj$par,obj$fn,obj$gr,upper = c(100,100))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr,upper = c(100,100))
obj$report()
opt <- nlminb(obj$par,obj$fn,obj$gr,upper = c(log(100),log(100)))
rep <- sdreport(obj)
opt
exp(4)
exp(5)
obj$report()
opt <- nlminb(obj$par,obj$fn,obj$gr,upper = c(log(100),log(10)))
rep <- sdreport(obj)
t(rbind(rep$value, rep$sd))
opt <- nlminb(obj$par,obj$fn,obj$gr,upper = c(log(100),log(100)))
rep <- sdreport(obj)
t(rbind(rep$value, rep$sd))
opt
# #################################
# Test negative binomial
# simulation in R and estimation using TMB
# small r and small n_i causes convergence issues
# #################################
rm(list = ls())
setwd("C:/Users/yinyi/Dropbox/BIO/Workspace/test")
# ### Data simulation
# number of stations
n_i <- 50
# density at location i
r <- 5 # measure of dispersion: small r causes convergence issues
d <- 5 # density mean
dens <- rgamma(n = n_i, shape = r, scale = d/r)
# mean catch at location i
rho <- 1.5
q_A <- 1
q_B <- q_A*rho
mu_A <- q_A * dens
mu_B <- q_B * dens
# catch at location i
n_A <- rpois(n_i, mu_A)
n_B <- rpois(n_i, mu_B)
plot(1:n_i, n_A, ylim = range(c(n_A, n_B)))
points(1:n_i, n_B, col = "red", pch = 2)
# plot(n_A,n_B, main = cor(n_A, n_B))
# ### Fit model
# # ### fit a negative multinomial model
#
# library(TMB)
#
# data = list(
#   n_A = n_A,
#   n_B = n_B)
# parameters = list(
#   log_d = 0,
#   log_r = 0,
#   log_dens = rep(0, n_i),
#   log_q_A = 0,
#   log_q_B = 0)
#
# version <- "negative_multinomial"
# compile(paste0(version,".cpp"))
# dyn.load(dynlib(version))
# obj = MakeADFun(data=data,
#                 parameters=parameters,
#                 map=list("log_q_A" = factor(NA)),
#                 random=c("log_dens"),
#                 DLL=version,
#                 silent = F)
# opt <- nlminb(obj$par,obj$fn,obj$gr)
# rep <- sdreport(obj)
#
# c(rep$value, rep$sd)
#
# plot(exp(rep$par.random), dens)
# abline(0, 1, col = "red")
# ### fit a beta negative multinomial model
# only converges with an upper limit on beta distn parameters
# because alpha, beta -> Inf
# try different parameterization?
library(TMB)
data = list(
n_A = n_A,
n_B = n_B)
parameters = list(
log_alpha = 0,
log_beta = 0,
log_rho = rep(0, n_i))
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr,upper = c(log(100),log(100)))
rep <- sdreport(obj)
t(rbind(rep$value, rep$sd))
n_B/(n_A+n_B)
data
version <- "beta_binomial"
compile(paste0(version,".cpp"))
dyn.load(dynlib(version))
obj = MakeADFun(data=data,
parameters=parameters,
random=c("log_rho"),
DLL=version,
silent = F)
opt <- nlminb(obj$par,obj$fn,obj$gr,upper = c(log(100),log(100)))
opt
obj$report()
opt <- nlminb(obj$par,obj$fn,obj$gr,
lower = c(log(0.1),log(0.1)),
upper = c(log(100),log(100)))
rep <- sdreport(obj)
t(rbind(rep$value, rep$sd))
obj$gr()
obj$report()
obj$report()$p/(1=obj$report()$p)
obj$report()$p/(1+obj$report()$p)
obj$report()$p/(1-obj$report()$p)
hist(obj$report()$p/(1-obj$report()$p))
n_A
n_B
# #################################
# Test beta negative binomial
# simulation in R and estimation using TMB
# #################################
rm(list = ls())
setwd("C:/Users/yinyi/Dropbox/BIO/Workspace/test")
# ### Data simulation
# number of stations
n_i <- 100
# density across locations
r <- 10 # measure of dispersion
d <- 30 # density mean
dens <- rgamma(n = n_i, shape = r, scale = d/r)
# cond prob of catch by B across stations
alpha = 20
beta = 20
p <- rbeta(n_i, alpha, beta)
rho <- p/(1-p)
# catch at location i: poisson
q_A <- rep(1, n_i)
q_B <- q_A * rho
mu_A <- dens * q_A
mu_B <- dens * q_B
n_A <- rpois(n_i, mu_A)
n_B <- rpois(n_i, mu_B)
plot(1:n_i, n_A, ylim = range(c(n_A, n_B)))
points(1:n_i, n_B, col = "red", pch = 2)
plot(n_A,n_B, main = cor(n_A, n_B))
